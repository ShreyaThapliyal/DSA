Question : https://leetcode.com/problems/reorder-list/

Solution :

class Solution {
public:
    ListNode *midPoint(ListNode *head){
        ListNode *slow=head;
        if(head==NULL || head->next==NULL)
            return head;
        else{
            ListNode *fast=slow->next->next;
            while(fast!=NULL && fast->next!=NULL){
                slow=slow->next;
                if(fast->next!=NULL)
                    fast=fast->next->next;
                else{
                    fast=NULL;
                }
            }
        }
        return slow;
    }
    
    ListNode *reverseLL(ListNode *head2){
        //reverse the linked list
        ListNode *curr=head2,*prev=NULL;
        while(curr!=NULL){
            ListNode *next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        head2=prev;
        return prev;
    }
    
    void reorderList(ListNode* head) {
        
        // Handle edge cases 
        if(head==NULL || head->next==NULL)
            return ;
        
        //First half of list is in temp pointer
        ListNode *temp=midPoint(head);
        ListNode *newhead=temp->next;
        temp->next=NULL;
        
        //reversed second half is in head2
        ListNode *head2=reverseLL(newhead);
        
        //merging two linked list alternatively
        ListNode *temp1=NULL,*curr=head,*temp2=NULL;
        while(curr!=NULL){
            temp1=curr->next;
            curr->next=head2;
            temp2=head2->next;
            head2->next=temp1;
            head2=temp2;
            curr=temp1;
        }
        if(head2!=NULL){
            curr = head;
            while(curr->next!=NULL){
                curr = curr->next;
            }
            curr->next = head2;
        }
    }
};
