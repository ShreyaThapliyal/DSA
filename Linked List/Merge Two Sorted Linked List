Question : https://leetcode.com/problems/merge-two-sorted-lists/

Solution :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *temp1=list1,*temp2=list2,*head=NULL,*tail=NULL;
        while(temp1!=NULL && temp2!=NULL){
            if(temp1->val<=temp2->val){
                ListNode *newnode=new ListNode();
                newnode->val=temp1->val;
                newnode->next=NULL;
                if(head==NULL){
                    head=newnode;
                    tail=newnode;
                }
                else{
                    tail->next=newnode;
                    tail=newnode;
                }
                temp1=temp1->next;
            }
            else if(temp1->val>temp2->val){
                ListNode *newnode=new ListNode();
                newnode->val=temp2->val;
                newnode->next=NULL;
                if(head==NULL){
                    head=newnode;
                    tail=newnode;
                }
                else{
                    tail->next=newnode;
                    tail=newnode;
                }
                temp2=temp2->next;
            }
        }
        while(temp1!=NULL){
            ListNode *newnode=new ListNode();
            newnode->val=temp1->val;
            newnode->next=NULL;
            if(head==NULL){
                    head=newnode;
                    tail=newnode;
                }
                else{
                    tail->next=newnode;
                    tail=newnode;
                }
            temp1=temp1->next;
        }
        while(temp2!=NULL){
            ListNode *newnode=new ListNode();
            newnode->val=temp2->val;
            newnode->next=NULL;
            if(head==NULL){
                    head=newnode;
                    tail=newnode;
                }
                else{
                    tail->next=newnode;
                    tail=newnode;
                }
            temp2=temp2->next;
        }
        return head;
    }
};
